import os
import sys
import subprocess
import threading
import time
from PyQt6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QListWidget, QLabel, QPushButton,
    QLineEdit, QFileDialog, QTextEdit, QMessageBox, QHBoxLayout, QListWidgetItem, QSpinBox
)
from PyQt6.QtGui import QIcon
from PyQt6.QtCore import Qt

# --- –ü—É—Ç–∏ –∫ —Ä–µ—Å—É—Ä—Å–∞–º ---
def resource_path(relative_path):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –±—É–¥—å —Ç–æ —Å–∫—Ä–∏–ø—Ç –∏–ª–∏ exe"""
    try:
        # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ PyInstaller, —Ñ–∞–π–ª—ã –ª–µ–∂–∞—Ç –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–ø–∫–µ _MEIPASS
        base_path = sys._MEIPASS
    except AttributeError:
        # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –Ω–∞–ø—Ä—è–º—É—é
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)

RESOURCES_DIR = "resources"

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –±–∞—Ç–Ω–∏–∫–æ–≤
if getattr(sys, 'frozen', False):
    # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ exe
    THIS_DIR = os.path.dirname(sys.executable)
else:
    # –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ —Å–∫—Ä–∏–ø—Ç
    THIS_DIR = os.path.dirname(os.path.abspath(__file__))

BAT_DIR = os.path.join(THIS_DIR, "bat_files")

class BatRunner(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("PWBR")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º resource_path –¥–ª—è –∏–∫–æ–Ω–∫–∏
        self.setWindowIcon(QIcon(resource_path(os.path.join(RESOURCES_DIR, "GameIcon.ico"))))
        self.resize(700, 600)
        self.init_ui()

    def init_ui(self):
        layout = QVBoxLayout()

        # –°–ø–∏—Å–æ–∫ –±–∞—Ç–Ω–∏–∫–æ–≤
        layout.addWidget(QLabel("–°–ø–∏—Å–æ–∫ –±–∞—Ç–Ω–∏–∫–æ–≤:"))
        self.bat_list = QListWidget()
        self.bat_list.setSelectionMode(QListWidget.SelectionMode.ExtendedSelection)
        layout.addWidget(self.bat_list)

        # --- –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ---
        wd_layout = QHBoxLayout()
        wd_layout.addWidget(QLabel("–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è Perfect World:"))
        self.wd_edit = QLineEdit()
        self.wd_edit.setPlaceholderText("–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ, –≥–¥–µ –ª–µ–∂–∏—Ç elementclient.exe")
        wd_layout.addWidget(self.wd_edit)
        browse_btn = QPushButton("–û–±–∑–æ—Ä")
        browse_btn.clicked.connect(self.choose_dir)
        wd_layout.addWidget(browse_btn)
        layout.addLayout(wd_layout)

        # --- –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç–Ω–∏–∫–∞–º–∏ ---
        delay_layout = QHBoxLayout()
        delay_layout.addWidget(QLabel("–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç–Ω–∏–∫–∞–º–∏ (—Å–µ–∫):"))
        self.delay_spin = QSpinBox()
        self.delay_spin.setMinimum(0)
        self.delay_spin.setMaximum(60)
        self.delay_spin.setValue(5)  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 —Å–µ–∫—É–Ω–¥
        delay_layout.addWidget(self.delay_spin)
        layout.addLayout(delay_layout)

        # --- –ö–Ω–æ–ø–∫–∏ ---
        btn_layout = QHBoxLayout()
        run_btn = QPushButton("‚ñ∂ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ")
        run_btn.clicked.connect(self.run_selected)
        refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫")
        refresh_btn.clicked.connect(self.refresh_list)
        btn_layout.addWidget(run_btn)
        btn_layout.addWidget(refresh_btn)
        layout.addLayout(btn_layout)

        # --- –õ–æ–≥ ---
        layout.addWidget(QLabel("–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:"))
        self.log = QTextEdit()
        self.log.setReadOnly(True)
        layout.addWidget(self.log)

        self.setLayout(layout)

        # –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É bat_files, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(BAT_DIR, exist_ok=True)
        self.refresh_list()

    def refresh_list(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ .bat —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–æ–¥–ø–∞–ø–∫–∏"""
        self.bat_list.clear()
        bat_files = [f for f in os.listdir(BAT_DIR) if f.lower().endswith(".bat")]
        if not bat_files:
            return
        for f in bat_files:
            self.bat_list.addItem(QListWidgetItem(f))

    def choose_dir(self):
        folder = QFileDialog.getExistingDirectory(self, "–í—ã–±—Ä–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é", THIS_DIR)
        if folder:
            self.wd_edit.setText(folder)

    def run_selected(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ .bat —Ñ–∞–π–ª—ã"""
        items = self.bat_list.selectedItems()
        if not items:
            QMessageBox.warning(self, "–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω .bat —Ñ–∞–π–ª")
            return

        working_dir = self.wd_edit.text().strip()
        if not working_dir:
            QMessageBox.warning(self, "–ù–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏", "–£–∫–∞–∂–∏—Ç–µ —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
            return
        if not os.path.isdir(working_dir):
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–£–∫–∞–∑–∞–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        delay_sec = self.delay_spin.value()

        bat_files = [os.path.join(BAT_DIR, i.text()) for i in items]
        self.log.append(f"\n=== –ó–∞–ø—É—Å–∫ {len(bat_files)} —Ñ–∞–π–ª–æ–≤ (–∏–Ω—Ç–µ—Ä–≤–∞–ª {delay_sec} —Å–µ–∫, –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è) ===")
        for bf in bat_files:
            self.log.append(f"  ‚Ä¢ {os.path.basename(bf)}")

        threading.Thread(target=self.run_bats_async,
                         args=(bat_files, working_dir, delay_sec),
                         daemon=True).start()

    def run_bats_async(self, bat_files, working_dir, delay_sec):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç .bat —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        for idx, bat_path in enumerate(bat_files, start=1):
            bat_name = os.path.basename(bat_path)
            self.log.append(f"\n‚ñ∂ –ó–∞–ø—É—Å–∫ {idx}/{len(bat_files)}: {bat_name}")
            try:
                subprocess.Popen(
                    ["cmd", "/c", bat_path],
                    cwd=working_dir,
                    shell=True,
                    creationflags=subprocess.CREATE_NO_WINDOW
                )
                self.log.append(f"–ó–∞–ø—É—â–µ–Ω {bat_name} ‚úÖ")
            except Exception as e:
                self.log.append(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {bat_name}: {e}")
            time.sleep(delay_sec)
        self.log.append("\n=== –í—Å–µ –±–∞—Ç–Ω–∏–∫–∏ –∑–∞–ø—É—â–µ–Ω—ã ===\n")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    win = BatRunner()
    win.show()
    sys.exit(app.exec())
